{{- $namespaceParts := split "-" .Release.Namespace }}
{{- $branch := index $namespaceParts "_1" }}
{{- $config := index .Values $branch }}
---
apiVersion: mongodbcommunity.mongodb.com/v1
kind: MongoDBCommunity
metadata:
  name: mongo
  namespace: {{ .Values.appName }}-{{ $branch }}
spec:
  members: {{ $config.mongo.replicas }}
  type: ReplicaSet
  version: 6.0.8
  security:
    authentication:
      modes: ["SCRAM"]
  users:
    - name: {{ $config.mongo.account.root.username }}
      db: admin
      passwordSecretRef: # a reference to the secret that will be used to generate the user's password
        name: {{ $config.mongo.account.root.username }}
      roles:
        - name: root
          db: admin
      scramCredentialsSecretName: {{ $config.mongo.account.root.username }}
    - name: {{ $config.mongo.account.user.username }}
      db: {{ .Values.appName }}-{{ $branch }}
      passwordSecretRef: # a reference to the secret that will be used to generate the user's password
        name: {{ $config.mongo.account.user.username }}
      roles:
        - name: readWrite
          db: {{ .Values.appName }}-{{ $branch }}
      scramCredentialsSecretName: {{ $config.mongo.account.user.username }}
  prometheus:
    username: {{ $config.mongo.account.prometheus.username }}
    passwordSecretRef:
      name: {{ $config.mongo.account.prometheus.username }}
  # additionalMongodConfig:
  #   storage.wiredTiger.engineConfig.journalCompressor: zlib
  statefulSet:
    spec:
      template:
        spec:
          nodeSelector:
            node-role.kubernetes.io/database: "true"
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - mongo
                  topologyKey: "kubernetes.io/hostname"
          initContainers:
            - name: change-dir-permissions
              command: ["chown", "-R", "2000", "/data", "/var/log"]
              image: busybox
              volumeMounts:
                - name: data-volume
                  mountPath: /data
                - name: logs-volume
                  mountPath: /var/log
              securityContext:
                runAsNonRoot: false
                runAsUser: 0
                runAsGroup: 0
          containers:
            - name: mongod
              resources:
                limits:
                  cpu: {{ $config.mongo.resources.limits.cpu }}
                  memory: {{ $config.mongo.resources.limits.memory }}
                requests:
                  cpu: {{ $config.mongo.resources.requests.cpu }}
                  memory: {{ $config.mongo.resources.requests.memory }}
            - name: mongodb-agent
              resources:
                limits:
                  cpu: 0.5
                  memory: 250M
                requests:
                  cpu: 0.05
                  memory: 50M
      volumeClaimTemplates:
        - metadata:
            name: data-volume
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{ $config.mongo.storage.data }}
            selector:
              matchLabels:
                namespace: {{ .Values.appName }}-{{ $branch }}
                database: mongo
                type: data
            storageClassName: default
        - metadata:
            name: logs-volume
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{ $config.mongo.storage.logs }}
            selector:
              matchLabels:
                namespace: {{ .Values.appName }}-{{ $branch }}
                database: mongo
                type: logs
            storageClassName: default
{{ range $index, $element := until (int $config.mongo.replicas) }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    namespace: {{ $.Values.appName }}-{{ $branch }}
    database: mongo
    type: data
  name: {{ $.Values.appName }}-{{ $branch }}-mongo-data-volume-{{ $index }}
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: {{ $config.mongo.storage.data }}
  hostPath:
    path: /root/kubernetes/{{ $.Values.appName }}-{{ $branch }}/mongo/data-{{ $index }}
    type: ""
  persistentVolumeReclaimPolicy: Delete
  storageClassName: default
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    namespace: {{ $.Values.appName }}-{{ $branch }}
    database: mongo
    type: logs
  name: {{ $.Values.appName }}-{{ $branch }}-mongo-logs-volume-{{ $index }}
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: {{ $config.mongo.storage.logs }}
  hostPath:
    path: /root/kubernetes/{{ $.Values.appName }}-{{ $branch }}/mongo/logs-{{ $index }}
    type: ""
  persistentVolumeReclaimPolicy: Delete
  storageClassName: default
  volumeMode: Filesystem
{{ end }}
