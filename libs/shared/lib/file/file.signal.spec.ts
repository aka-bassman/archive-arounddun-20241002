import { WebFile } from "@shared/nest";
import { cnst } from "../cnst";
import { dayjs } from "@core/base";
import { fetch } from "../fetch";
import { sleep } from "@core/common";
export const imageBase64 = ``;

export const getFileInputSamples = (num = 1): [fileList: FileList, metas: cnst.FileMeta[]] => {
  const buffers = new Array(num).fill(imageBase64).map((base64: string) => Buffer.from(base64, "base64"));
  const files = buffers.map((buffer) => new WebFile([buffer], "image.jpg", { type: "image/jpeg" }));
  const metas = files.map((file) => ({ lastModifiedAt: dayjs(), size: file.size }));
  return [files as unknown as FileList, metas];
};

export const addAndWaitActiveFiles = async (
  fileList: FileList,
  metas: cnst.FileMeta[],
  type = "test",
  parentId?: string
) => {
  // 1. 파일 업로드
  const files = await fetch.addFiles(fileList, metas, type, parentId);

  // 2. 파일 업로드 완료 대기
  const MAX_TRY_NUM = 5;
  const activeFiles = await Promise.all(
    files.map(async (file) => {
      expect(file).toMatchObject({ status: "uploading", size: metas[0].size });

      for (let i = 0; i < MAX_TRY_NUM; i++) {
        await sleep(1000);
        file = await fetch.lightFile(file.id);
        if (file.status !== "uploading") break;
      }
      expect(file.status).toEqual("active");
      expect(file.url.length).toBeGreaterThan(0);
      expect(file.abstractData?.length).toBeGreaterThan(0);
      return file;
    })
  );

  // 3. 파일 반환
  return activeFiles;
};

export const getActiveFiles = async (num = 1): Promise<cnst.LightFile[]> => {
  const [fileList, metas] = getFileInputSamples(num);
  const files = await addAndWaitActiveFiles(fileList, metas);
  return files;
};
